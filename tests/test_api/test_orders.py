# Tests Generated by ChatGPT

import pytest
from httpx import AsyncClient

from app.config import settings
from app.models import Order, OrderStatus


@pytest.mark.asyncio
async def test_create_order( client: AsyncClient, test_book, auth_headers_user ):
    """Test creating an order"""
    response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":2}]}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["status"] == OrderStatus.PENDING
    assert len(data["items"]) == 1
    assert data["items"][0]["book_id"] == test_book.id
    assert data["items"][0]["quantity"] == 2
    assert float(data["total_amount"]) == float(test_book.price * 2)


@pytest.mark.asyncio
async def test_create_empty_order( client: AsyncClient, auth_headers_user ):
    """Test creating an empty order (should fail)"""
    response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user, json={"items":[]}
    )
    assert response.status_code == 400
    assert "Order must contain at least one item" in response.json()["detail"]


@pytest.mark.asyncio
async def test_create_order_insufficient_stock( client: AsyncClient, test_book, auth_headers_user ):
    """Test creating order with insufficient stock"""
    response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":1000  # More than available stock
        }]}
    )
    assert response.status_code == 400


@pytest.mark.asyncio
async def test_get_user_orders( client: AsyncClient, test_book, auth_headers_user ):
    """Test getting user's orders"""
    # First create an order
    create_response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":1}]}
    )
    assert create_response.status_code == 200

    # Get orders
    response = await client.get(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user
    )
    assert response.status_code == 200
    data = response.json()
    assert "orders" in data
    assert len(data["orders"]) >= 1


@pytest.mark.asyncio
async def test_pay_order_even_card( client: AsyncClient, test_book, auth_headers_user, db_session ):
    """Test paying order with even card number (should succeed)"""
    # Create order
    create_response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":2}]}
    )
    order_id = create_response.json()["id"]

    # Pay order with even card
    response = await client.post(
        f"{settings.API_V1_STR}/orders/{order_id}/pay", headers=auth_headers_user,
        json={"order_id":order_id, "card_number":"1234567890123456",  # Even number
            "card_holder":"John Doe", "expiry_month":12, "expiry_year":2025, "cvv":"123"}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is True
    assert "transaction_id" in data

    # Verify order status is updated
    order_response = await client.get(
        f"{settings.API_V1_STR}/orders/{order_id}", headers=auth_headers_user
    )
    assert order_response.json()["status"] == OrderStatus.PAID


@pytest.mark.asyncio
async def test_pay_order_odd_card( client: AsyncClient, test_book, auth_headers_user ):
    """Test paying order with odd card number (should fail)"""
    # Create order
    create_response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":1}]}
    )
    order_id = create_response.json()["id"]

    # Pay order with odd card
    response = await client.post(
        f"{settings.API_V1_STR}/orders/{order_id}/pay", headers=auth_headers_user,
        json={"order_id":order_id, "card_number":"1234567890123457",  # Odd number
            "card_holder":"John Doe", "expiry_month":12, "expiry_year":2025, "cvv":"123"}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["success"] is False

    # Verify order status is failed
    order_response = await client.get(
        f"{settings.API_V1_STR}/orders/{order_id}", headers=auth_headers_user
    )
    assert order_response.json()["status"] == OrderStatus.FAILED


@pytest.mark.asyncio
async def test_cancel_order( client: AsyncClient, test_book, auth_headers_user ):
    """Test canceling an order"""
    # Create order
    create_response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":1}]}
    )
    order_id = create_response.json()["id"]

    # Cancel order
    response = await client.post(
        f"{settings.API_V1_STR}/orders/{order_id}/cancel", headers=auth_headers_user
    )
    assert response.status_code == 200
    assert response.json()["status"] == OrderStatus.CANCELLED


@pytest.mark.asyncio
async def test_pay_already_paid_order( client: AsyncClient, test_book, auth_headers_user ):
    """Test paying an already paid order"""
    # Create and pay order
    create_response = await client.post(
        f"{settings.API_V1_STR}/orders/", headers=auth_headers_user,
        json={"items":[{"book_id":test_book.id, "quantity":1}]}
    )
    order_id = create_response.json()["id"]

    # First payment
    await client.post(
        f"{settings.API_V1_STR}/orders/{order_id}/pay", headers=auth_headers_user,
        json={"order_id":order_id, "card_number":"1234567890123456", "card_holder":"John Doe", "expiry_month":12,
            "expiry_year":2025, "cvv":"123"}
    )

    # Try to pay again
    response = await client.post(
        f"{settings.API_V1_STR}/orders/{order_id}/pay", headers=auth_headers_user,
        json={"order_id":order_id, "card_number":"1234567890123456", "card_holder":"John Doe", "expiry_month":12,
            "expiry_year":2025, "cvv":"123"}
    )
    assert response.status_code == 400
    assert "Order is already paid" in response.json()["detail"]

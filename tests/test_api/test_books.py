# Tests Generated by ChatGPT

import pytest
from httpx import AsyncClient

from app.config import settings


@pytest.mark.asyncio
async def test_get_books( client: AsyncClient, test_book ):
    """Test getting list of books"""
    response = await client.get(f"{settings.API_V1_STR}/books/")
    assert response.status_code == 200
    data = response.json()
    assert "books" in data
    assert "total" in data
    assert len(data["books"]) >= 1
    assert data["books"][0]["title"] == test_book.title


@pytest.mark.asyncio
async def test_get_book_by_id( client: AsyncClient, test_book ):
    """Test getting book by ID"""
    response = await client.get(f"{settings.API_V1_STR}/books/{test_book.id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == test_book.id
    assert data["title"] == test_book.title
    assert float(data["price"]) == float(test_book.price)


@pytest.mark.asyncio
async def test_get_nonexistent_book( client: AsyncClient ):
    """Test getting nonexistent book"""
    response = await client.get(f"{settings.API_V1_STR}/books/999999")
    assert response.status_code == 404
    assert "Book not found" in response.json()["detail"]


@pytest.mark.asyncio
async def test_create_book_as_admin( client: AsyncClient, auth_headers_admin ):
    """Test creating book as admin"""
    response = await client.post(
        f"{settings.API_V1_STR}/books/", headers=auth_headers_admin,
        json={"title":"New Book", "description":"A new book description", "price":39.99, "stock_quantity":20,
            "image_url":"https://example.com/new-book.jpg"}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "New Book"
    assert float(data["price"]) == 39.99


@pytest.mark.asyncio
async def test_create_book_as_user( client: AsyncClient, auth_headers_user ):
    """Test creating book as regular user (should fail)"""
    response = await client.post(
        f"{settings.API_V1_STR}/books/", headers=auth_headers_user,
        json={"title":"New Book", "description":"A new book description", "price":39.99, "stock_quantity":20}
    )
    assert response.status_code == 403
    assert "Not enough permissions" in response.json()["detail"]


@pytest.mark.asyncio
async def test_update_book_as_admin( client: AsyncClient, test_book, auth_headers_admin ):
    """Test updating book as admin"""
    response = await client.put(
        f"{settings.API_V1_STR}/books/{test_book.id}", headers=auth_headers_admin,
        json={"title":"Updated Book Title", "price":49.99}
    )
    assert response.status_code == 200
    data = response.json()
    assert data["title"] == "Updated Book Title"
    assert float(data["price"]) == 49.99


@pytest.mark.asyncio
async def test_delete_book_as_admin( client: AsyncClient, test_book, auth_headers_admin ):
    """Test deleting book as admin"""
    response = await client.delete(
        f"{settings.API_V1_STR}/books/{test_book.id}", headers=auth_headers_admin
    )
    assert response.status_code == 204

    # Verify book is deleted
    response = await client.get(f"{settings.API_V1_STR}/books/{test_book.id}")
    assert response.status_code == 404


@pytest.mark.asyncio
async def test_create_book_invalid_price( client: AsyncClient, auth_headers_admin ):
    """Test creating book with invalid price"""
    response = await client.post(
        f"{settings.API_V1_STR}/books/", headers=auth_headers_admin,
        json={"title":"Book with Invalid Price", "description":"Description", "price":-10.00,  # Negative price
            "stock_quantity":10}
    )
    assert response.status_code == 422